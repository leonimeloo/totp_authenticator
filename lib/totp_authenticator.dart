import 'dart:math';
import 'dart:typed_data';
import 'package:crypto/crypto.dart';
import 'package:base32/base32.dart';

class TOTP {
  final int digits;
  final HashAlgorithm hashAlgorithm;

  TOTP({
    this.digits = 6,
    this.hashAlgorithm = HashAlgorithm.sha1,
  });

  /// Generates an OTP code based on the provided secret and interval.
  ///
  /// * secretKey is the secret key in string, length limit 16 to 255.
  /// * interval is the time interval in seconds, recommended to use 30 secs
  String generateTOTPCode(String secretKey, {int interval = 30, int? time}) {
    final currentTime = time ?? (DateTime.now().toUtc().millisecondsSinceEpoch ~/ 1000);
    final timeCounter = currentTime ~/ interval;
    return _generateOTP(secretKey, timeCounter, digits, hashAlgorithm);
  }

  /// Verifies a given TOTP code against a secret key.
  /// * secretKey : Secret key, generated by [generateSecret]
  /// * otpCode : TOTP code from App
  /// * interval : Time interval in seconds, default is 30 seconds
  /// It will return true if code is correct, otherwise false
  bool verifyCode(String secretKey, String otpCode, {int interval = 30, int discrepancy = 1}) {
    final currentTime = DateTime.now().toUtc().millisecondsSinceEpoch ~/ 1000;
    for (int i = -discrepancy; i <= discrepancy; i++) {
      final generatedToken = generateTOTPCode(secretKey, interval: interval, time: currentTime + (i * interval));
      if (generatedToken == otpCode) {
        return true;
      }
    }
    return false;
  }

  // Generates a QR code URI for OTP authentication.
  /// * appName : App name
  /// * secretKey: Secret key
  /// * issuer: Issuer name, default: totp_authenticator
  String generateQRCodeUri(String appName, String secretKey, {String issuer = 'totp_authenticator', int interval = 30}) {
  final uri = Uri(
    scheme: 'otpauth',
    host: 'totp',
    path: '/$appName',
    queryParameters: {
      'secret': secretKey,
      'issuer': issuer,  // Aqui o issuer usa o valor padrão 'totp_authenticator' se não for passado
      'algorithm': hashAlgorithm.name.toUpperCase(),
      'digits': digits.toString(),
      'period': interval.toString(),
    },
  );
  return uri.toString();
}

  // Generates a QR code URL for OTP authentication.
  ///
  /// Returns a URL for ready QR Code
  String generateQRCodeUrl(String appName, String secretKey, {String issuer = 'totp_authenticator'}) {
    final uri = generateQRCodeUri(appName, secretKey, issuer: issuer);
    return 'https://api.qrserver.com/v1/create-qr-code/?data=$uri';
  }

  /// Generate OTP password
  String _generateOTP(String secret, int counter, int digits, HashAlgorithm hashAlgorithm) {
    final secretBytes = base32.decode(secret);

    final counterBytes = _intToBytelist(counter);

    final hmac = Hmac(_getHash(hashAlgorithm), secretBytes);
    final hash = hmac.convert(counterBytes).bytes;


    final offset = hash.last & 0xf;


    final code = ((hash[offset] & 0x7f) << 24) |
                 ((hash[offset + 1] & 0xff) << 16) |
                 ((hash[offset + 2] & 0xff) << 8) |
                 (hash[offset + 3] & 0xff);

    final otp = code % pow(10, digits);

    return otp.toString().padLeft(digits, '0');
  }

  List<int> _intToBytelist(int value) {
    final result = List<int>.filled(8, 0);
    for (var i = 7; i >= 0; i--) {
      result[i] = value & 0xff;
      value >>= 8;
    }
    return result;
  }

  Hash _getHash(HashAlgorithm algorithm) {
    switch (algorithm) {
      case HashAlgorithm.sha1:
        return sha1;
      case HashAlgorithm.sha256:
        return sha256;
      case HashAlgorithm.sha512:
        return sha512;
      default:
        throw ArgumentError('Algoritmo de hash não suportado');
    }
  }

  /// The secret is generated using the Base32 alphabet and is suitable for
  /// use in TOTP (Time-based One-Time Password) applications.
  ///
  /// * length : The length of the secret to generate. Must be between 16 and 255, defaults is 16.
  static String generateSecret({int length = 16}) {
    final random = Random.secure();
    final values = List<int>.generate(length, (i) => random.nextInt(256));
    return base32.encode(Uint8List.fromList(values)).replaceAll('=', '');  // Corrigido para Uint8List
  }
}

enum HashAlgorithm {
  sha1,
  sha256,
  sha512,
}
